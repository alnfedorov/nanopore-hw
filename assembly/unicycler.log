
Starting Unicycler (2020-11-03 23:51:36)
----------------------------------------
    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you provided both short and long reads, Unicycler will perform a hybrid assembly. It will first use SPAdes to make a short-read assembly graph, and then it will use various methods to scaffold that graph with the long reads.
    For more information, please see https://github.com/rrwick/Unicycler

Command: /mnt/local/vse2020/home/alex_fedorov/miniconda3/envs/nanopore-hw/bin/unicycler -1 fastq/SRR11461738/SRR11461738_1.fastq -2 fastq/SRR11461738/SRR11461738_2.fastq -l fastq/SRR11461739/SRR11461739.trimmed.filtlong.fastq -o assembly -t 16

Unicycler version: v0.4.4
Using 16 threads

Making output directory:
  /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly

Dependencies:
  Program         Version             Status  
  spades.py       3.13.1              good    
  racon           -                   good    
  makeblastdb     2.5.0+              good    
  tblastn         2.5.0+              good    
  bowtie2-build   2.3.4.3             good    
  bowtie2         2.3.4.3             good    
  samtools        1.7                 good    
  java            1.8.0_152-release   good    
  pilon           1.23                good    
  bcftools                            not used


SPAdes read error correction (2020-11-03 23:51:58)
--------------------------------------------------
    Unicycler uses the SPAdes read error correction module to reduce the number of errors in the short read before SPAdes assembly. This can make the assembly faster and simplify the assembly graph structure.

Command: /mnt/local/vse2020/home/alex_fedorov/miniconda3/envs/nanopore-hw/bin/spades.py -1 /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/fastq/SRR11461738/SRR11461738_1.fastq -2 /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/fastq/SRR11461738/SRR11461738_2.fastq -o /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/spades_assembly/read_correction --threads 16 --only-error-correction

Corrected reads:
  /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/spades_assembly/corrected_1.fastq.gz
  /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/spades_assembly/corrected_2.fastq.gz


Choosing k-mer range for assembly (2020-11-04 00:08:57)
-------------------------------------------------------
    Unicycler chooses a k-mer range for SPAdes based on the length of the input reads. It uses a wide range of many k-mer sizes to maximise the chance of finding an ideal assembly.

Median read length: 146
K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127


SPAdes assemblies (2020-11-04 00:09:19)
---------------------------------------
    Unicycler now uses SPAdes to assemble the short reads. It scores the assembly graph for each k-mer using the number of contigs (fewer is better) and the number of dead ends (fewer is better). The score function is 1/(c*(d+2)), where c is the contig count and d is the dead end count.

K-mer   Contigs   Dead ends   Score   
   27                           failed
   47                           failed
   63                           failed
   77                           failed
   89                           failed
   99                           failed
  107                           failed
  115                           failed
  121                           failed
  127        97           1   3.44e-03 <-best

Deleting /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/spades_assembly/


Determining graph multiplicity (2020-11-04 00:22:36)
----------------------------------------------------
    Multiplicity is the number of times a sequence occurs in the underlying sequence. Single-copy contigs (those with a multiplicity of one, occurring only once in the underlying sequence) are particularly useful.

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/001_best_spades_graph.gfa


Cleaning graph (2020-11-04 00:22:36)
------------------------------------
    Unicycler now performs various cleaning procedures on the graph to remove overlaps and simplify the graph structure. The end result is a graph ready for bridging.

Graph overlaps removed

Removed zero-length segments:
    53, 54, 62, 63, 64, 65, 67, 76, 90, 91, 93, 95

Merged small segments:
    92

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/002_overlaps_removed.gfa

    Unicycler now selects a set of anchor contigs from the single-copy contigs. These are the contigs which will be connected via bridges to form the final assembly.

19 anchor segments (4,134,066 bp) out of 84 total segments (4,167,371 bp)


Creating SPAdes contig bridges (2020-11-04 00:22:36)
----------------------------------------------------
    SPAdes uses paired-end information to perform repeat resolution (RR) and produce contigs from the assembly graph. SPAdes saves the graph paths corresponding to these contigs in the contigs.paths file. When one of these paths contains two or more anchor contigs, Unicycler can create a bridge from the path.

                                     Bridge
Start          Path         End     quality
    3    -51 -> 20 -> -51   7           4.5
    7   -46 -> -70 -> -46   5          15.4
    8          -47          12         50.9
   11          -47          2          62.8


Creating loop unrolling bridges (2020-11-04 00:22:36)
-----------------------------------------------------
    When a SPAdes contig path connects an anchor contig with the middle contig of a simple loop, Unicycler concludes that the sequences are contiguous (i.e. the loop is not a separate piece of DNA). It then uses the read depth of the middle and repeat contigs to guess the number of times to traverse the loop and makes a bridge.

                                  Loop count   Loop count    Loop    Bridge
Start   Repeat   Middle     End    by repeat    by middle   count   quality
    3      -51       20       7         0.55         1.17       1      33.9
   -5       46       70      -7         1.89         1.32       2      24.4


Loading reads (2020-11-04 00:22:36)
-----------------------------------
32,623 / 32,623 (100.0%) - 397,778,026 bp


Assembling contigs and long reads with miniasm (2020-11-04 00:22:42)
--------------------------------------------------------------------
    Unicycler uses miniasm to construct a string graph assembly using both the short read contigs and the long reads. It will then use the resulting string graph to produce bridges between contigs. This method requires decent coverage of long reads and therefore may not be fruitful if long reads are sparse. However, it does not rely on the short read assembly graph having good connectivity and is able to bridge an assembly graph even when it contains many dead ends.
    Unicycler uses two types of "reads" as assembly input: anchor contigs from the short-read assembly and actual long reads which overlap two or more of these contigs. It then assembles them with miniasm.

Aligning long reads to graph using minimap

Saving to /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/01_assembly_reads.fastq:
  19 short-read contigs
  3,544 long reads

Finding overlaps with minimap... 
success
  369,045 overlaps

Assembling reads with miniasm... 
success
  166 segments, 166 links

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/11_branching_paths_removed.gfa
Merging segments into unitigs:
  1 circular unitig
  total size = 4,212,645 bp
Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/12_unitig_graph.gfa


Polishing miniasm assembly with Racon (2020-11-04 00:23:06)
-----------------------------------------------------------
    Unicycler now uses Racon to polish the miniasm assembly. It does multiple rounds of polishing to get the best consensus. Circular unitigs are rotated between rounds such that all parts (including the ends) are polished well.

Saving to /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/racon_polish/polishing_reads.fastq:
  19 short-read contigs
  32,623 long reads

Polish       Assembly          Mapping
round            size          quality
begin       4,212,645        33,134.77

Best polish: /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/racon_polish/001_unpolished_unitigs.fasta
Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/13_racon_polished.gfa
Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/003_long_read_assembly.gfa

    Contigs in the short-read assembly graph which end in dead ends may contain bogus sequence near the dead end. Unicycler therefore uses the read clipping values from the miniasm assembly to trim these dead ends to only the parts which aligned well to long reads.

No dead ends required trimming.

    Unicycler now places the single copy contigs back into the unitig graph. This serves two purposes: a) it replaces long read assembly sequences (which may be error prone) with Illumina assembly sequence (which is probably quite accurate), improving the assembly quality, and b) it defines inter-contig sequences for use in building bridges.

Searching for contigs using 5,000 bp of contig ends.

Contig   Result              Start pos   End pos   Strand
     1   not found                                       
     2   not found                                       
     3   not found                                       
     4   not found                                       
     5   not found                                       
     6   not found                                       
     7   found in unitig 1     2236039   2418587        -
     8   not found                                       
     9   not found                                       
    10   not found                                       
    11   not found                                       
    12   not found                                       
    13   not found                                       
    14   not found                                       
    15   not found                                       
    16   not found                                       
    17   not found                                       
    18   not found                                       
    54   not found                                       

Searching for contigs using 2,500 bp of contig ends.

Contig   Result              Start pos   End pos   Strand
     1   found in unitig 1     2919503   3844494        +
     2   not found                                       
     3   not found                                       
     4   not found                                       
     5   not found                                       
     6   not found                                       
     8   not found                                       
     9   not found                                       
    10   not found                                       
    11   not found                                       
    12   not found                                       
    13   not found                                       
    14   not found                                       
    15   not found                                       
    16   not found                                       
    17   not found                                       
    18   not found                                       
    54   not found                                       

Searching for contigs using 1,000 bp of contig ends.

Contig   Result              Start pos   End pos   Strand
     2   found in unitig 1        7695    926362        +
     3   found in unitig 1     2425721   2913338        -
     4   not found                                       
     5   found in unitig 1     1995346   2235582        -
     6   not found                                       
     8   found in unitig 1     3930170   4095118        -
     9   not found                                       
    10   not found                                       
    11   not found                                       
    12   not found                                       
    13   not found                                       
    14   found in unitig 1     1716514   1776034        +
    15   found in unitig 1     1786786   1841783        +
    16   not found                                       
    17   not found                                       
    18   not found                                       
    54   not found                                       

Searching for contigs using 500 bp of contig ends.

Contig   Result              Start pos   End pos   Strand
     4   not found                                       
     6   not found                                       
     9   not found                                       
    10   not found                                       
    11   not found                                       
    12   found in unitig 1     3845179   3929975        -
    13   not found                                       
    16   found in unitig 1     1846868   1862166        +
    17   found in unitig 1     4097771   4110418        -
    18   not found                                       
    54   not found                                       

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/miniasm_assembly/15_contigs_placed.gfa


Creating miniasm/Racon bridges (2020-11-04 00:23:57)
----------------------------------------------------
    Now that the miniasm/Racon string graph is complete, Unicycler will use it to build bridges between anchor segments.

       Start -> end   Best path                                 Quality
 1/11     2 -> 14     -50, -26, 21, -64, -82, 40, -53, 81, 22,    4.259
                      69, 56, 75, -4, -57, -77, 21, 65, -82,           
                      40, 67, 60, 81, 22, -13, 24, 9, 25, 31,          
                      34, -19, 25, 30, 34, 6, -59, -57, -77,           
                      21, 65, -82, 40, -53, 81, 22, 69, -68,           
                      -73, 66, -62, -74, 63, -57, -77, 21, 65,         
                      -82, 40, -53, 81, 22, 69, -68, -73, 66,          
                      -62, -43, -36, -57, -77, 21, 65, -82,            
                      40, -53, 81, 22, 69, -68, -73                    
 2/11    -8 -> -17    -39, -41, -45, 33, 61, 35, -72, -28, 52,   80.117
                      58                                               
 3/11   -17 -> 2      -39, 42, -45, -29, 35, -27, 52, -18, 61,   20.847
                      35, -72, -23, 58, 11, -47                        
 4/11    14 -> 15     -71, -59, -57, -77, 21, 65, -83, 40,       47.030
                      -53, 80, 22, 69, -68, -73, 66, -62, -43,         
                      -79, -49, -38, -76, 63, -57, -77, 21,            
                      65, -82, 40, -53, 81, 22, 69, -68, -73,          
                      66                                               
 5/11    15 -> 16     -59, 48, -77, 21, 65, -82, 40, 67, 44,     57.583
                      80, 22, 69, -68                                  
 6/11    16 -> -5     -71, -59, -57, -77, 21, 65, -83, 40, 67,   16.102
                      44, 80, 22, 69, 56, 75, -10, 55, 55              
 7/11    -5 -> -7     46, 70, 46                                 79.260
 8/11    -7 -> -3     51, -20, 51                                58.550
 9/11    -3 -> 1      -56, -69, -22, -81, -60, -67, -40, 83,     55.555
                      -65, -21, 77, 57, -63, 76, -37, 49, 32,          
                      50                                               
10/11     1 -> -12    -24                                        80.729
11/11   -12 -> -8     47                                         78.913


Creating simple long read bridges (2020-11-04 09:24:49)
-------------------------------------------------------
    Unicycler uses long read alignments (from minimap) to resolve simple repeat structures in the graph. This takes care of some "low-hanging fruit" of the graph simplification.

Aligning long reads to graph using minimap

    Two-way junctions are defined as cases where two graph contigs (A and B) join together (C) and then split apart again (D and E). This usually represents a simple 2-copy repeat, and there are two possible options for its resolution: (A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a junction gets to "vote" for option 1, option 2 or neither. Unicycler creates a bridge at each junction for the most voted for option.

                                                  Op. 1   Op. 2   Neither   Final    Bridge
Junction        Option 1           Option 2       votes   votes     votes     op.   quality
      24    -13 -> 24 -> -1,   -13 -> 24 -> 9,        3     103        43       2      53.3
             12 -> 24 -> 9      12 -> 24 -> -1                                             
      47   -12 -> 47 -> -11,   -12 -> 47 -> -8,       0      95        30       2      71.6
             -2 -> 47 -> -8    -2 -> 47 -> -11                                             

    Simple loops are parts of the graph where two contigs (A and B) are connected via a repeat (C) which loops back to itself (via D). It is possible to traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times (A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the correct number of times through. In this step, such reads are found and each is aligned against alternative loop counts. A reads casts its "vote" for the loop count it agrees best with, and Unicycler creates a bridge using the most voted for count.

                                   Read                         Loop    Bridge
Start   Repeat   Middle     End   count   Read votes           count   quality
  -10       55               -5      83   1 loop: 83 votes         1      99.7
   -5       46       70      -7      61   bad: 1 vote    1         1      95.7
                                          loop: 59 votes                      
                                          2 loops: 1 vote                     
    3      -51       20       7      23   1 loop: 23 votes         1      91.4


Determining low score threshold (2020-11-04 09:26:04)
-----------------------------------------------------
    Before conducting semi-global alignment of the long reads to the assembly graph, Unicycler must determine a minimum alignment score threshold such that nonsense alignments are excluded. To choose a threshold automatically, it examines alignments between random sequences and selects a score a few standard deviations above the mean.

Automatically choosing a threshold using random alignment scores.

Random alignment mean score: 61.66
         standard deviation:  1.31
        Low score threshold: 61.66 + (7 x 1.31) = 70.86


Aligning reads (2020-11-04 09:26:10)
------------------------------------
32,623 / 32,623 (100.0%)


Read alignment summary (2020-11-04 13:42:24)
--------------------------------------------
Total read count:             32,623
Fully aligned reads:          29,932
Partially aligned reads:       2,205
Unaligned reads:                 486
Total bases aligned:     386,103,928 bp
Mean alignment identity:          86.9%

Deleting /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/read_alignment/


Building long read bridges (2020-11-04 13:42:25)
------------------------------------------------
    Unicycler uses the long read alignments to produce bridges between anchor segments. These bridges can be formed using as few as one long read, giving Unicycler the ability to bridge the graph even when long-read depth is low.

       Start -> end   Best path                                 Quality
 1/29    10 -> 16                                                 3.098
 2/29    10 -> -3                                                 3.394
 3/29    15 -> 4                                                  2.163
 4/29    13 -> 8                                                  2.694
 5/29    11 -> -6                                                 3.257
 6/29    15 -> -4                                                 3.521
 7/29    15 -> -6                                                 2.966
 8/29     7 -> 5      -46, -70, -46                              81.762
 9/29     4 -> 2                                                  4.624
10/29    13 -> 12                                                 4.249
11/29     5 -> 10     -55, -55                                   77.788
12/29    11 -> 2      -47                                        81.979
13/29    12 -> -1     24                                         67.331
14/29    -4 -> 12                                                 4.436
15/29    -9 -> 13     -24                                        73.104
16/29     8 -> 12     -47                                        61.469
17/29     9 -> 6      25, 31, 34, -19, 25, 30, 34                70.097
18/29   -11 -> 18     -58, 23, 72, -35, -61                      80.459
19/29     6 -> -4     -59, -57, -77, 21, -64, -82, 40, -53,       6.230
                      81, 22, 69, 56, 75                               
20/29    18 -> 17     -52, 27, -35, 29, 45, -42, 39              69.233
21/29    17 -> 8      -58, -52, 28, 72, -35, -61, -33, 45, 41,   81.605
                      39                                               
22/29     6 -> 14     -59, -57, -77, 21, 65, -82, 40, -53, 81,   71.616
                      22, 69, -68, -73, 66, -62, -74, 63, -57,         
                      -77, 21, 65, -82, 40, -53, 81, 22, 69,           
                      -68, -73, 66, -62, -43, -36, -57, -77,           
                      21, 65, -82, 40, -53, 81, 22, 69, -68,           
                      -73                                              
23/29    13 -> 4      -22, -81, 53, -40, 82, -65, -21, 77, 57    61.213
24/29    -1 -> 3      -50, -32, -49, 37, -76, 63, -57, -77,      75.891
                      21, -64, -83, 40, 67, 60, 81, 22, 69, 56         
25/29     4 -> -2     -75, -56, -69, -22, -81, 53, -40, 82,      85.042
                      64, -21, 26, 50                                  
26/29    16 -> -10    -71, -59, -57, -77, 21, 65, -83, 40, 67,   69.213
                      44, 80, 22, 69, 56, 75                           
27/29    15 -> 16     -59, 48, -77, 21, 65, -82, 40, 67, 44,     79.735
                      80, 22, 69, -68                                  
28/29     3 -> 7      -51, 20, -51                               71.139
29/29    14 -> 15     -71, -59, -57, -77, 21, 65, -83, 40,       82.013
                      -53, 80, 22, 69, -68, -73, 66, -62, -43,         
                      -79, -49, -38, -76, 63, -57, -77, 21,            
                      65, -82, 40, -53, 80, 22, 69, -68, -73,          
                      66                                               


Applying bridges (2020-11-04 13:43:36)
--------------------------------------
    Unicycler now applies to the graph in decreasing order of quality. This ensures that when multiple, contradictory bridges exist, the most supported option is used.

Bridge type        Start -> end   Path                                       Quality
simple long read    -10 -> -5     55, 55                                      99.737
simple long read     -5 -> -7     46, 70, 46                                  95.668
simple long read      3 -> 7      -51, 20, -51                                91.353
long read             4 -> -2     -75, -56, -69, -22, -81, 53, -40, 82,       85.042
                                  64, -21, 26, 50                                   
long read            14 -> 15     -71, -59, -57, -77, 21, 65, -83, 40,        82.013
                                  -53, 80, 22, 69, -68, -73, 66, -62, -43,          
                                  -79, -49, -38, -76, 63, -57, -77, 21,             
                                  65, -82, 40, -53, 80, 22, 69, -68, -73,           
                                  66                                                
long read            11 -> 2      -47                                         81.979
long read            17 -> 8      -58, -52, 28, 72, -35, -61, -33, 45, 41,    81.605
                                  39                                                
miniasm               1 -> -12    -24                                         80.729
long read           -11 -> 18     -58, 23, 72, -35, -61                       80.459
long read            15 -> 16     -59, 48, -77, 21, 65, -82, 40, 67, 44,      79.735
                                  80, 22, 69, -68                                   
miniasm             -12 -> -8     47                                          78.913
long read            -1 -> 3      -50, -32, -49, 37, -76, 63, -57, -77,       75.891
                                  21, -64, -83, 40, 67, 60, 81, 22, 69, 56          
long read            -9 -> 13     -24                                         73.104
long read             6 -> 14     -59, -57, -77, 21, 65, -82, 40, -53, 81,    71.616
                                  22, 69, -68, -73, 66, -62, -74, 63, -57,          
                                  -77, 21, 65, -82, 40, -53, 81, 22, 69,            
                                  -68, -73, 66, -62, -43, -36, -57, -77,            
                                  21, 65, -82, 40, -53, 81, 22, 69, -68,            
                                  -73                                               
long read             9 -> 6      25, 31, 34, -19, 25, 30, 34                 70.097
long read            18 -> 17     -52, 27, -35, 29, 45, -42, 39               69.233
long read            16 -> -10    -71, -59, -57, -77, 21, 65, -83, 40, 67,    69.213
                                  44, 80, 22, 69, 56, 75                            
long read            13 -> 4      -22, -81, 53, -40, 82, -65, -21, 77, 57     61.213

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/004_bridges_applied.gfa


Bridged assembly graph (2020-11-04 13:43:37)
--------------------------------------------
    The assembly is now mostly finished and no more structural changes will be made. Ideally the assembly graph should now have one contig per replicon and no erroneous contigs (i.e a complete assembly). If there are more contigs, then the assembly is not complete.

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/005_final_clean.gfa

Component   Segments   Links   Length      N50         Longest segment   Status  
        1          1       1   4,215,612   4,215,612         4,215,612   complete


Polishing assembly with Pilon (2020-11-04 13:43:37)
---------------------------------------------------
    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any remaining small-scale errors with the assembly.

Aligning reads to find appropriate insert size range...
Insert size 1st percentile:  150
Insert size 99th percentile: 589

Pilon polish round 1
Unable to polish assembly using Pilon: Pilon encountered an error:
Pilon version 1.23 Mon Nov 26 16:04:05 2018 -0500
Genome: 1_polish_input.fasta
Fixing snps, indels
Input genome size: 4215612
Processing 1:1-4215612
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at org.broadinstitute.pilon.PileUp.<init>(PileUp.scala:26)
	at org.broadinstitute.pilon.PileUpRegion.$anonfun$new$1(PileUpRegion.scala:30)
	at org.broadinstitute.pilon.PileUpRegion$$Lambda$42/539142386.apply$mcVI$sp(Unknown Source)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:155)
	at org.broadinstitute.pilon.PileUpRegion.<init>(PileUpRegion.scala:30)
	at org.broadinstitute.pilon.GenomeRegion.initializePileUps(GenomeRegion.scala:148)
	at org.broadinstitute.pilon.GenomeFile.$anonfun$processRegions$4(GenomeFile.scala:111)
	at org.broadinstitute.pilon.GenomeFile.$anonfun$processRegions$4$adapted(GenomeFile.scala:109)
	at org.broadinstitute.pilon.GenomeFile$$Lambda$39/1053631449.apply(Unknown Source)
	at scala.collection.Iterator.foreach(Iterator.scala:937)
	at scala.collection.Iterator.foreach$(Iterator.scala:937)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1425)
	at scala.collection.parallel.ParIterableLike$Foreach.leaf(ParIterableLike.scala:970)
	at scala.collection.parallel.Task.$anonfun$tryLeaf$1(Tasks.scala:49)
	at scala.collection.parallel.Task$$Lambda$40/725560393.apply$mcV$sp(Unknown Source)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.util.control.Breaks$$anon$1.catchBreak(Breaks.scala:63)
	at scala.collection.parallel.Task.tryLeaf(Tasks.scala:52)
	at scala.collection.parallel.Task.tryLeaf$(Tasks.scala:46)
	at scala.collection.parallel.ParIterableLike$Foreach.tryLeaf(ParIterableLike.scala:967)
	at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask.compute(Tasks.scala:149)
	at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask.compute$(Tasks.scala:145)
	at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:436)
	at java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)



Rotating completed replicons (2020-11-04 14:52:28)
--------------------------------------------------
    Any completed circular contigs (i.e. single contigs which have one link connecting end to start) can have their start position changed with altering the sequence. For consistency, Unicycler now searches for a starting gene (dnaA or repA) in each such contig, and if one is found, the contig is rotated to start with that gene on the forward strand.

Segment   Length      Depth   Starting gene     Position    Strand    Identity   Coverage
      1   4,215,612   1.00x   UniRef90_P05648   3,172,105   reverse     100.0%     100.0%

Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/006_rotated.gfa


Assembly complete (2020-11-04 14:54:44)
---------------------------------------
Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/assembly.gfa
Saving /mnt/local/vse2020/home/alex_fedorov/nanopore-hw/assembly/assembly.fasta

